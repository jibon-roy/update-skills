"use client"
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/xYHqD5MkVkT
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
import Link from "next/link"
import { Button } from "@/components/ui/button"
import TextLogo from "./logo/textLogo"
import { DropdownMenuTrigger, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuItem, DropdownMenuContent, DropdownMenu } from "@/components/ui/dropdown-menu"
import Image from "next/image"
import { useSession } from "next-auth/react"
import userIcon from '@/assets/userplaceholder.png'
import { useRouter, usePathname } from "next/navigation"
import SimpleLogin from "./simpleLogin/simpleLogin"
import { useEffect, useState } from "react"
import SimpleSignUp from "./simpleLogin/simpleSignup"
import useAuth from "@/lib/hooks/useAuth"

export function Navigation() {
  const { data } = useSession()
  const router = useRouter()
  const pathname = usePathname()
  const [showHideLogin, setShowHideLogin] = useState(false)
  const [showHideSignUp, setShowHideSignUp] = useState(false)
  const session = useSession()
  const { handleSignOut } = useAuth()

  useEffect(() => {
    if (session.status === 'authenticated') {
      setShowHideLogin(true);
      setShowHideSignUp(false)
    }
  }, [session])


  const handleLoginOpen = () => {
    setShowHideLogin(!showHideLogin)
  }
  const handleSignUpOpen = () => {
    setShowHideSignUp(!showHideSignUp)
  }

  // const handleSignOut = async () => {
  //   await signOut({ redirect: false }).then(() => {
  //     Swal.fire({
  //       title: 'See you!',
  //       text: 'Log out successful.',
  //       icon: 'success',
  //       confirmButtonText: 'Okay',
  //       confirmButtonColor: 'hsl(var(--main-primary-violet))'
  //     });
  //     router.push("/");
  //   });
  // }
  type NavMenu = {
    id: string | number;
    name: string;
    path: string;
  }

  const menu: NavMenu[] = [
    { id: 1, name: 'Home', path: '/' },
    { id: 3, name: 'All courses', path: '/allcourses' },
    { id: 2, name: 'Dashboard', path: '/dashboard' },
    { id: 4, name: 'Services', path: '/services' },
    { id: 5, name: 'About', path: '/about' },
    { id: 6, name: 'Contact', path: '/contact' },
  ]


  const isActive = (path: string) => pathname === path;

  return (
    <nav className="bg-white overflow-hidden max-w-[100vw] shadow-sm dark:bg-gray-950/90">
      <div className="w-full container mx-auto px-4">
        <div className="flex overflow-hidden justify-between h-14 items-center">
          <TextLogo />
          <nav className="hidden md:flex gap-4">
            {menu.map((link) => <Link href={link.path} key={link.id} className={`font-medium flex items-center text-sm transition-colors relative  ${isActive(link.path) ?
              ` before:content-[''] before:absolute before:rounded-full before:-bottom-1 before:left-0 before:w-full before:h-1 before:bg-main-primary-violet before:duration-200 before:ease-in-out`
              :
              `before:content-[''] before:absolute before:rounded-full before:-bottom-1 before:left-0 before:w-full before:h-1 before:bg-main-primary-violet hover:before:scale-x-100 before:scale-x-0 before:origin-right hover:before:origin-left before:transition-transform before:duration-200 before:ease-in-out`}`}>
              {link.name}
            </Link>)}
          </nav>
          <div className="flex overflow-hidden items-center gap-4">
            {data ? (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    className="rounded-full border border-gray-200 w-8 h-8 dark:border-gray-800"
                    size="icon"
                    variant="ghost"
                  >
                    <Image
                      alt="Avatar"
                      className="rounded-full"
                      height="32"
                      src={data?.user?.image ? data?.user?.image : userIcon.src}
                      style={{
                        aspectRatio: "32/32",
                        objectFit: "cover",
                      }}
                      width="32"
                    />
                    <span className="sr-only">Toggle user menu</span>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuLabel>{data?.user?.name}</DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem>Settings</DropdownMenuItem>
                  <DropdownMenuItem>Support</DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={handleSignOut}>Logout</DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            ) : (
              <>
                <Button onClick={handleSignUpOpen} size="sm">Sign up</Button>
                <Button onClick={handleLoginOpen} size="sm" variant="outline">
                  Log in
                </Button>
                <div className={`absolute lg:fixed z-50 top-0 right-0 duration-300 transform ${showHideSignUp ? '' : '-mx-[100vw] md:-mx-[510px] 2xl:-mx-[810px]'}`}>
                  <SimpleSignUp handleOpen={handleSignUpOpen} />
                </div>
                <div className={`absolute lg:fixed z-50 top-0 right-0 duration-300 transform ${showHideLogin ? '' : '-mx-[100vw] md:-mx-[510px] 2xl:-mx-[810px]'}`}>
                  <SimpleLogin handleOpen={handleLoginOpen} />
                </div>
              </>
            )}
          </div>
        </div>
      </div>

    </nav>
  )
}


